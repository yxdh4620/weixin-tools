// Generated by CoffeeScript 1.8.0

/*
 * 微信的工具类
 * author: YuanXiangDong
 * date: 2015-03-03
 */

(function() {
  var REDIS_WEIXIN_KEYS, WEIXIN_APP_ID, WEIXIN_INTERFACE_URLS, WEIXIN_SECRET, assert, checkSignature, createMenus, crypto, deleteMenus, generateConfig, generateNonceStr, generateTimestamp, getAccessToken, getJsapiTicket, init, loadMenus, logger, makeSignature, redis, request, _, _cacheTicket, _loadCacheTicket, _raw;

  logger = require('dev-logger');

  crypto = require('crypto');

  _ = require('underscore');

  request = require('request');

  assert = require("assert");

  redis = require('../utils/redis_db').redis;

  REDIS_WEIXIN_KEYS = {
    access_token: "weixin_access_token",
    jsapi_ticket: "weixin_jsapi_ticket"
  };

  WEIXIN_INTERFACE_URLS = {
    GET_ACCESS_TOKEN_URL: "https://api.weixin.qq.com/cgi-bin/token",
    GET_JSAPI_TICKET_URL: "https://api.weixin.qq.com/cgi-bin/ticket/getticket",
    GET_MENUS_URL: "https://api.weixin.qq.com/cgi-bin/menu/get",
    POST_MENUS_URL: "https://api.weixin.qq.com/cgi-bin/menu/create",
    DELETE_MENUS_URL: "https://api.weixin.qq.com/cgi-bin/menu/delete"
  };

  WEIXIN_APP_ID = null;

  WEIXIN_SECRET = null;

  _loadCacheTicket = function(key, callback) {
    redis.get(key, function(err, value) {
      if (err != null) {
        logger.error("[weixin_util::_loadCacheTicket] error:" + err);
        return callback(err);
      }
      return callback(null, value);
    });
  };

  _cacheTicket = function(key, seconds, value, callback) {
    redis.setex(key, seconds, value, function(err) {
      if (err != null) {
        logger.error("[weixin_util::_cacheTicket] error" + err);
      }
      callback(err);
    });
  };

  _raw = function(args) {
    var k, keys, newArgs, str, v;
    keys = _.keys(args);
    keys = keys.sort();
    newArgs = {};
    keys.forEach(function(key) {
      return newArgs[key.toLowerCase()] = args[key];
    });
    str = "";
    console.dir(newArgs);
    for (k in newArgs) {
      v = newArgs[k];
      str += "&" + k + "=" + v;
    }
    return str.substr(1);
  };

  init = function(options) {
    logger.log("LOG [weixin_util::init] start");
    assert(options, "missing optinos");
    WEIXIN_APP_ID = options.appid;
    WEIXIN_SECRET = options.secret;
    assert(WEIXIN_APP_ID, "missing weixin appid");
    assert(WEIXIN_SECRET, "missing weixin secret");
  };

  getAccessToken = function(callback) {
    _loadCacheTicket(REDIS_WEIXIN_KEYS.access_token, function(err, result) {
      var options, url;
      if (!err && (result != null)) {
        return callback(null, result);
      }
      url = "" + WEIXIN_INTERFACE_URLS.GET_ACCESS_TOKEN_URL + "?grant_type=client_credential&appid=" + WEIXIN_APP_ID + "&secret=" + WEIXIN_SECRET;
      options = {
        url: url,
        method: "GET",
        json: true
      };
      request(options, function(err, res, body) {
        var seconds;
        if (err != null) {
          return callback(err);
        }
        if (_.isEmpty(body)) {
          return callback(new Error("result data is error"));
        }
        if ((body.errcode != null) && parseInt(body.errcode) !== 0) {
          return callback(new Error("errCode" + body.errcode + " " + body.errmsg));
        }
        if (body.access_token == null) {
          return callback(new Error("get access_token is null"));
        }
        seconds = parseInt(body.expires_in) - 600;
        _cacheTicket(REDIS_WEIXIN_KEYS.access_token, seconds, body.access_token, function(err) {
          if (err != null) {
            return callback(err);
          }
          return callback(null, body.access_token);
        });
      });
    });
  };

  getJsapiTicket = function(callback) {
    _loadCacheTicket(REDIS_WEIXIN_KEYS.jsapi_ticket, function(err, result) {
      if (!err && (result != null)) {
        return callback(null, result);
      }
      getAccessToken(function(err, access_token) {
        var options, url;
        if (err != null) {
          return callback(err);
        }
        url = "" + WEIXIN_INTERFACE_URLS.GET_JSAPI_TICKET_URL + "?access_token=" + access_token + "&type=jsapi";
        options = {
          url: url,
          method: "GET",
          json: true
        };
        request(options, function(err, res, body) {
          var seconds;
          if (err != null) {
            return callback(err);
          }
          if (_.isEmpty(body)) {
            return callback(new Error("result data is error"));
          }
          if ((body.errcode != null) && parseInt(body.errcode) !== 0) {
            return callback(new Error("errCode" + body.errcode + " " + body.errmsg));
          }
          if (body.ticket == null) {
            return callback(new Error("get access_token is null"));
          }
          seconds = parseInt(body.expires_in) - 600;
          _cacheTicket(REDIS_WEIXIN_KEYS.jsapi_ticket, seconds, body.ticket, function(err) {
            if (err != null) {
              return callback(err);
            }
            return callback(null, body.ticket);
          });
        });
      });
    });
  };

  createMenus = function(menus, callback) {
    return getAccessToken(function(err, access_token) {
      var options, url;
      if (err != null) {
        return callback(err);
      }
      url = "" + WEIXIN_INTERFACE_URLS.POST_MENUS_URL + "?access_token=" + access_token;
      options = {
        url: url,
        json: true,
        method: "POST",
        body: menus
      };
      return request(options, function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        return callback(null, body);
      });
    });
  };

  loadMenus = function(callback) {
    return getAccessToken(function(err, access_token) {
      var options, url;
      if (err != null) {
        return callback(err);
      }
      url = "" + WEIXIN_INTERFACE_URLS.GET_MENUS_URL + "?access_token=" + access_token;
      options = {
        url: url,
        json: true,
        method: "GET"
      };
      return request(options, function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        return callback(null, body);
      });
    });
  };

  deleteMenus = function(callback) {
    return getAccessToken(function(err, access_token) {
      var options, url;
      if (err != null) {
        return callback(err);
      }
      url = "" + WEIXIN_INTERFACE_URLS.DELETE_MENUS_URL + "?access_token=" + access_token;
      options = {
        url: url,
        json: true,
        method: "GET"
      };
      return request(options, function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        return callback(null, body);
      });
    });
  };

  generateNonceStr = function() {
    return Math.random().toString(36).substr(2, 15);
  };

  generateTimestamp = function() {
    return parseInt(Date.now() / 1000);
  };

  makeSignature = function(url, jsapi_ticket, noncestr, timestamp) {
    var args, digest, str;
    args = {
      url: url,
      jsapi_ticket: jsapi_ticket,
      noncestr: noncestr,
      timestamp: timestamp
    };
    str = _raw(args);
    console.log("str:" + str);
    digest = crypto.createHash("sha1").update(str).digest("hex");
    return digest;
  };

  checkSignature = function(signature, url, jsapi_ticket, noncestr, timestamp) {
    var sign;
    sign = makeSignature(url, jsapi_ticket, noncestr, timestamp);
    return sign === signature;
  };

  generateConfig = function(jsapi_ticket, url) {
    var noncestr, result, sign, timestamp;
    noncestr = generateNonceStr();
    timestamp = generateTimestamp();
    sign = makeSignature(url, jsapi_ticket, noncestr, timestamp);
    result = {
      appId: WEIXIN_APP_ID,
      jsapi_ticket: jsapi_ticket,
      noncestr: noncestr,
      timestamp: timestamp,
      url: url,
      signature: sign
    };
    return result;
  };

  module.exports = {
    init: init,
    getAccessToken: getAccessToken,
    getJsapiTicket: getJsapiTicket,
    loadMenus: loadMenus,
    createMenus: createMenus,
    deleteMenus: deleteMenus,
    makeSignature: makeSignature,
    checkSignature: checkSignature,
    generateConfig: generateConfig
  };

}).call(this);
