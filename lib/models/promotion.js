// Generated by CoffeeScript 1.8.0

/*
 * 企业付款功能接口， 需要双向证书
 * date 2017-01-17
 * auther YuanXiangDong
 */

(function() {
  var RequestUrls, assert, crypto, debuglog, helps, iconv, promotion, promotionValidate, request, _;

  debuglog = require("debug")("weixin_tools::pay");

  assert = require("assert");

  _ = require('underscore');

  crypto = require('crypto');

  request = require('request');

  RequestUrls = require("../enums/request_urls");

  helps = require("../utils/helps");

  iconv = require("iconv-lite");

  promotion = function(args, callback) {
    var options, xml;
    debuglog("[promotion] args", args);
    args.mch_appid = this.appid;
    args.mchid = this.payOptions.mchId;
    args.nonce_str = this.generateNonceStr();
    args = helps.rankAndEncode(args);
    args.sign = this.makePaySignature(args);
    xml = helps.json2xml(args);
    console.log(xml);
    options = {
      url: RequestUrls.PROMOTION_TRANSFERS_URL,
      method: "POST",
      agentOptions: this.agentOptions,
      body: xml
    };
    request(options, (function(_this) {
      return function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        _this.promotionValidate(body, function(err, data) {
          return callback(err, data);
        });
      };
    })(this));
  };

  promotionValidate = function(xml, callback) {
    return helps.xml2json(xml, (function(_this) {
      return function(err, data) {
        console.dir(data);
        console.log("mch_id:" + _this.payOptions.mchId + " appId:" + _this.appid + " sign:" + (_this.makePaySignature(data)) + " ");
        if (err != null) {
          return callback(err);
        }
        if (_.isEmpty(data)) {
          return callback(new Error("result data is error"));
        }
        if (!((data.return_code != null) && data.return_code === 'SUCCESS')) {
          return callback(new Error("errCode: " + data.return_code + " message: " + data.return_msg));
        }
        if (!((data.result_code != null) && data.result_code === 'SUCCESS')) {
          return callback(new Error("errCode: " + data.err_code + " message: " + data.err_code_des));
        }
        if (!((data.mch_appid != null) && data.mch_appid === _this.appid)) {
          return callback(new Error("Invalid appId"));
        }
        if (!((data.mchid != null) && data.mchid === _this.payOptions.mchId)) {
          return callback(new Error("Invalid mch_id"));
        }
        return callback(null, data);
      };
    })(this));
  };

  module.exports = {
    promotion: promotion,
    promotionValidate: promotionValidate
  };

}).call(this);
