// Generated by CoffeeScript 1.8.0

/*
 * 微信支付接口的工具类
 * date 2015-03-11
 * auther YuanXiangDong
 */

(function() {
  var PAY_DEFAULT_PARAMS, RequestUrls, assert, crypto, debuglog, getBrandWCPayRequestParams, helps, iconv, makePaySignature, payValidate, request, _;

  debuglog = require("debug")("weixin_tools::pay");

  assert = require("assert");

  _ = require('underscore');

  crypto = require('crypto');

  request = require('request');

  RequestUrls = require("../enums/request_urls");

  helps = require("../utils/helps");

  iconv = require("iconv-lite");

  PAY_DEFAULT_PARAMS = null;

  makePaySignature = function(args, signType) {
    var digest, pkg, str;
    if (signType == null) {
      signType = "md5";
    }
    pkg = _.clone(args);
    delete pkg.sign;
    str = helps.raw(pkg);
    str += "&key=" + this.payOptions.partnerKey;
    str = iconv.encode(str, 'utf8');
    digest = crypto.createHash(signType).update(str).digest("hex");
    return digest.toUpperCase();
  };


  /*
  获取JSAPI支付参数
  order = {
    body: '吮指原味鸡 * 1',
     *attach: '{"部位":"三角"}',
    out_trade_no: 'kfc001',
    total_fee: 10 * 100,
    spbill_create_ip: req.ip,
    openid: req.user.openid,
    trade_type: 'JSAPI'
  }
   */

  getBrandWCPayRequestParams = function(args, callback) {
    var options, xml;
    args.appid = this.appid;
    args.trade_type = args.trade_type || "JSAPI";
    args.mch_id = this.payOptions.mchId;
    args.notify_url = this.payOptions.notifyUrl;
    args.nonce_str = this.generateNonceStr();
    args = helps.rankAndEncode(args);
    args.sign = this.makePaySignature(args);
    xml = helps.json2xml(args);
    console.log(xml);
    options = {
      url: RequestUrls.PAY_UNIFIED_ORDER,
      method: "POST",
      body: xml
    };
    return request(options, (function(_this) {
      return function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        return _this.payValidate(body, function(err, data) {
          var jsConfig, results, sign;
          if (err != null) {
            return callback(err);
          }
          jsConfig = {
            appId: _this.appid,
            timeStamp: new String(_this.generateTimestamp()),
            nonceStr: _this.generateNonceStr(),
            signType: "MD5",
            "package": "prepay_id=" + data.prepay_id
          };
          sign = _this.makePaySignature(jsConfig);
          jsConfig.paySign = sign;
          results = {
            jsConfig: jsConfig,
            result: data
          };
          return callback(null, results);
        });
      };
    })(this));
  };

  payValidate = function(xml, callback) {
    return helps.xml2json(xml, (function(_this) {
      return function(err, data) {
        console.dir(data);
        console.log("mch_id:" + _this.payOptions.mchId + " appId:" + _this.appid + " sign:" + (_this.makePaySignature(data)) + " ");
        if (err != null) {
          return callback(err);
        }
        if (_.isEmpty(data)) {
          return callback(new Error("result data is error"));
        }
        if (!((data.return_code != null) && data.return_code === 'SUCCESS')) {
          return callback(new Error("errCode: " + data.return_code + " message: " + data.return_msg));
        }
        if (!((data.result_code != null) && data.result_code === 'SUCCESS')) {
          return callback(new Error("errCode: " + data.err_code + " message: " + data.err_code_des));
        }
        if (!((data.appid != null) && data.appid === _this.appid)) {
          return callback(new Error("Invalid appId"));
        }
        if (!((data.mch_id != null) && data.mch_id === _this.payOptions.mchId)) {
          return callback(new Error("Invalid mch_id"));
        }
        if (!((data.sign != null) && data.sign === _this.makePaySignature(data))) {
          return callback(new Error("Invalid Signature"));
        }
        return callback(null, data);
      };
    })(this));
  };

  module.exports = {
    makePaySignature: makePaySignature,
    getBrandWCPayRequestParams: getBrandWCPayRequestParams,
    payValidate: payValidate,
    xml2json: helps.xml2json,
    json2xml: helps.json2xml
  };

}).call(this);
