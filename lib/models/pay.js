// Generated by CoffeeScript 1.8.0

/*
 * 微信支付接口的工具类
 * date 2015-03-11
 * auther YuanXiangDong
 */

(function() {
  var PAY_DEFAULT_PARAMS, RequestUrls, assert, crypto, debuglog, getBrandWCPayRequestParams, helps, makePaySignature, request, _;

  debuglog = require("debug")("weixin_tools");

  assert = require("assert");

  _ = require('underscore');

  crypto = require('crypto');

  request = require('request');

  RequestUrls = require("../enums/request_urls");

  helps = require("../utils/helps");

  PAY_DEFAULT_PARAMS = null;

  makePaySignature = function(args, signType) {
    var digest, str;
    if (signType == null) {
      signType = "md5";
    }
    str = helps.raw(args);
    str += "&key=" + this.payOptions.partnerKey;
    digest = crypto.createHash(signType).update(str).digest("hex");
    return digest.toUpperCase();
  };


  /*
  获取JSAPI支付参数
  
  order = {
    body: '吮指原味鸡 * 1',
     *attach: '{"部位":"三角"}',
    out_trade_no: 'kfc001',
    total_fee: 10 * 100,
    spbill_create_ip: req.ip,
    openid: req.user.openid,
    trade_type: 'JSAPI'
  }
   */

  getBrandWCPayRequestParams = function(args, callback) {
    var options, xml;
    args.appid = this.appid;
    args.trade_type = args.trade_type || "JSAPI";
    args.mch_id = this.payOptions.mchId;
    args.notify_url = this.payOptions.notifyUrl;
    args.nonce_str = this.generateNonceStr();
    args.sign = this.makePaySignature(args);
    xml = helps.json2xml(args);
    options = {
      url: RequestUrls.PAY_UNIFIED_ORDER,
      method: "POST",
      body: xml
    };
    return request(options, (function(_this) {
      return function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        return helps.xml2json(body, function(err, data) {
          var results, sign;
          if (err != null) {
            return callback(err);
          }
          if (_.isEmpty(data)) {
            return callback(new Error("result data is error"));
          }
          if (!((data.return_code != null) && data.return_code === 'SUCCESS')) {
            return callback(new Error("errCode:" + data.return_code + " message:" + data.return_msg));
          }
          if (!((data.result_code != null) && data.result_code === 'SUCCESS')) {
            return callback(new Error("errCode: " + data.err_code + " message:" + data.err_code_des));
          }
          results = {
            appId: _this.appid,
            timeStamp: _this.generateTimestamp(),
            nonceStr: _this.generateNonceStr(),
            signType: "MD5",
            "package": "prepay_id=" + data.prepay_id
          };
          sign = makePaySignature(results);
          results.paySign = sign;
          return callback(null, results);
        });
      };
    })(this));
  };

  module.exports = {
    makePaySignature: makePaySignature,
    getBrandWCPayRequestParams: getBrandWCPayRequestParams
  };

}).call(this);
