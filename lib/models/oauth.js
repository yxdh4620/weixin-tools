// Generated by CoffeeScript 1.8.0

/*
 * 微信的oauth 登录方式实现工具
 */

(function() {
  var RESPONSE_TYPE, RequestUrls, SCOPEN_TYPES, assert, debuglog, generateAuthorizeURL, loadAuthorzeToken, loadUserInfo, loadUserInfoUnion, querystring, refreshAuthorzeToken, request, _;

  debuglog = require("debug")("weixin-tools::oauth");

  assert = require("assert");

  request = require('request');

  _ = require('underscore');

  querystring = require("querystring");

  RequestUrls = require("../enums/request_urls");

  RESPONSE_TYPE = 'code';

  SCOPEN_TYPES = {
    base: "snsapi_base",
    userinfo: "snsapi_userinfo"
  };

  generateAuthorizeURL = function(redirect, state, scope) {
    var info;
    info = {
      appid: this.appid,
      redirect_uri: redirect,
      response_type: RESPONSE_TYPE,
      scope: scope || SCOPEN_TYPES.base,
      state: state || ''
    };
    return RequestUrls.GET_AUTHORIZE_URL + '?' + querystring.encode(info) + '#wechat_redirect';
  };

  loadAuthorzeToken = function(code, callback) {
    var options, url;
    url = "" + RequestUrls.GET_AUTHORIZE_TOKEN_URL + "?appid=" + this.appid + "&secret=" + this.secret + "&code=" + code + "&grant_type=authorization_code";
    options = {
      url: url,
      method: "GET",
      json: true
    };
    return request(options, function(err, res, body) {
      if (err != null) {
        return callback(err);
      }
      if (_.isEmpty(body)) {
        return callback(new Error("result data is error"));
      }
      if ((body.errcode != null) && parseInt(body.errcode) !== 0) {
        return callback(new Error("errCode" + body.errcode + " " + body.errmsg));
      }
      if (body.access_token == null) {
        return callback(new Error("get authorze_token is null"));
      }
      return callback(null, body);
    });
  };

  refreshAuthorzeToken = function(refresh_token, callback) {
    var options, url;
    url = "" + RequestUrls.GET_RE_AUTHORIZE_TOKEN_URL + "?appid=" + this.appid + "&refresh_token=" + refresh_token + "&grant_type=refresh_token";
    options = {
      url: url,
      method: "GET",
      json: true
    };
    return request(options, function(err, res, body) {
      console.dir(body);
      if (err != null) {
        return callback(err);
      }
      if (_.isEmpty(body)) {
        return callback(new Error("result data is error"));
      }
      if ((body.errcode != null) && parseInt(body.errcode) !== 0) {
        return callback(new Error("errCode" + body.errcode + " " + body.errmsg));
      }
      if (body.access_token == null) {
        return callback(new Error("get authorze_token is null"));
      }
      return callback(null, body);
    });
  };

  loadUserInfo = function(openid, authorze_token, lang, callback) {
    var options, url;
    if (lang == null) {
      lang = 'zh_CN';
    }
    url = "" + RequestUrls.GET_USER_INFO_URL + "?access_token=" + authorze_token + "&openid=" + openid + "&lang=" + lang;
    console.log("loadUserInfo:: url:: " + url);
    options = {
      url: url,
      method: "GET",
      json: true
    };
    return request(options, function(err, res, body) {
      console.dir(body);
      if (err != null) {
        return callback(err);
      }
      if (_.isEmpty(body)) {
        return callback(new Error("result data is error"));
      }
      if ((body.errcode != null) && parseInt(body.errcode) !== 0) {
        return callback(new Error("errCode" + body.errcode + " " + body.errmsg));
      }
      return callback(null, body);
    });
  };

  loadUserInfoUnion = function(openid, access_token, lang, callback) {
    var options, url;
    if (lang == null) {
      lang = 'zh_CN';
    }
    url = "" + RequestUrls.GET_USER_INFO_UNIONID_URL + "?access_token=" + access_token + "&openid=" + openid + "&lang=" + lang;
    console.log("loadUserInfo:: url:: " + url);
    options = {
      url: url,
      method: "GET",
      json: true
    };
    return request(options, function(err, res, body) {
      if (err != null) {
        return callback(err);
      }
      if (_.isEmpty(body)) {
        return callback(new Error("result data is error"));
      }
      if ((body.errcode != null) && parseInt(body.errcode) !== 0) {
        return callback(new Error("errCode" + body.errcode + " " + body.errmsg));
      }
      return callback(null, body);
    });
  };

  module.exports = {
    generateAuthorizeURL: generateAuthorizeURL,
    loadAuthorzeToken: loadAuthorzeToken,
    refreshAuthorzeToken: refreshAuthorzeToken,
    loadUserInfo: loadUserInfo,
    loadUserInfoUnion: loadUserInfoUnion
  };

}).call(this);
