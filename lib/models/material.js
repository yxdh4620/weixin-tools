// Generated by CoffeeScript 1.8.0

/*
 * 微信素材的接口, 并做相关处理
 */

(function() {
  var RequestUrls, addImageMaterial, addMaterial, addNewsMaterial, assert, child_process, debuglog, deleteMaterial, fs, getMaterialById, getMediaById, helps, loadMaterialCount, loadMaterialList, path, request, updateNewsMaterial, uploadMedia, _;

  debuglog = require("debug")("weixin_tools::material");

  _ = require('underscore');

  assert = require("assert");

  request = require('request');

  RequestUrls = require("../enums/request_urls");

  helps = require("../utils/helps");

  path = require("path");

  fs = require("fs");

  child_process = require('child_process');

  loadMaterialList = function(access_token, type, offset, count, callback) {
    var options, url;
    if (offset == null) {
      offset = 1;
    }
    if (count == null) {
      count = 20;
    }
    assert(_.isFunction(callback), "missing callback");
    url = "" + RequestUrls.MATERIAL_LOAD_LIST_URL + "?access_token=" + access_token;
    options = {
      url: url,
      json: true,
      method: "POST",
      body: {
        type: type,
        offset: offset,
        count: count
      }
    };
    request(options, (function(_this) {
      return function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        if (body == null) {
          return callback(new Error("invalid body"));
        }
        if (!((body.errcode == null) || (body.errcode === 0 && body.errmsg === 'ok'))) {
          return callback(new Error("" + body.errcode + ":" + body.errmsg));
        }
        callback(null, body);
      };
    })(this));
  };

  loadMaterialCount = function(access_token, callback) {
    var options, url;
    assert(_.isFunction(callback), "missing callback");
    url = "" + RequestUrls.MATERIAL_LOAD_COUNT_URL + "?access_token=" + access_token;
    options = {
      url: url,
      json: true,
      method: "GET"
    };
    request(options, (function(_this) {
      return function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        if (body == null) {
          return callback(new Error("invalid body"));
        }
        if (!((body.errcode == null) || (body.errcode === 0 && body.errmsg === 'ok'))) {
          return callback(new Error("" + body.errcode + ":" + body.errmsg));
        }
        callback(null, body);
      };
    })(this));
  };

  getMaterialById = function(access_token, id, callback) {
    var options, url;
    assert(_.isFunction(callback), "missing callback");
    url = "" + RequestUrls.MATERIAL_GET_BY_ID_URL + "?access_token=" + access_token;
    options = {
      url: url,
      json: true,
      method: "POST",
      body: {
        media_id: id
      }
    };
    request(options, (function(_this) {
      return function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        if (body == null) {
          return callback(new Error("invalid body"));
        }
        if (!((body.errcode == null) || (body.errcode === 0 && body.errmsg === 'ok'))) {
          return callback(new Error("" + body.errcode + ":" + body.errmsg));
        }
        callback(null, body);
      };
    })(this));
  };

  addMaterial = function(access_token, type, filepath, callback) {
    var cmd, url;
    assert(_.isFunction(callback), "missing callback");
    url = "" + RequestUrls.MATERIAL_ADD_MATERIAL_URL + "?access_token=" + access_token + "&type=" + type;
    cmd = "curl -F media=@" + filepath + " \"" + url + "\"";
    child_process.exec(cmd, function(err, stdout, stderr) {
      var body;
      if (err != null) {
        return callback(err);
      }
      try {
        body = JSON.parse(stdout);
        if (body == null) {
          return callback(new Error("invalid body"));
        }
        if (!((body.errcode == null) || (body.errcode === 0 && body.errmsg === 'ok'))) {
          return callback(new Error("" + body.errcode + ":" + body.errmsg));
        }
        callback(null, body);
        return;
      } catch (_error) {
        err = _error;
        return callback(new Error("invalid body"));
      }
    });
  };

  addImageMaterial = function(access_token, file, callback) {
    assert(_.isFunction(callback), "missing callback");
    addMaterial(access_token, 'image', file, callback);
  };

  addNewsMaterial = function(access_token, news, callback) {
    var options, url;
    assert(_.isFunction(callback), "missing callback");
    url = "" + RequestUrls.MATERIAL_ADD_NEW_URL + "?access_token=" + access_token;
    options = {
      url: url,
      json: true,
      body: {
        articles: news
      }
    };
    request.post(options, function(err, response, body) {
      console.dir(body);
      if (err != null) {
        return callback(err);
      }
      if (body == null) {
        return callback(new Error("invalid body"));
      }
      if (!((body.errcode == null) || (body.errcode === 0 && body.errmsg === 'ok'))) {
        return callback(new Error("" + body.errcode + ":" + body.errmsg));
      }
      callback(null, body);
    });
  };

  updateNewsMaterial = function(access_token, news, media_id, index, callback) {
    var options, url;
    if (_.isFunction(index)) {
      callback = index;
      index = 0;
    }
    assert(_.isFunction(callback), "missing callback");
    url = "" + RequestUrls.MATERIAL_UPDATE_NEWS_URL + "?access_token=" + access_token;
    options = {
      url: url,
      json: true,
      body: {
        media_id: media_id,
        index: index,
        articles: news
      }
    };
    request.post(options, function(err, response, body) {
      console.dir(body);
      if (err != null) {
        return callback(err);
      }
      if (body == null) {
        return callback(new Error("invalid body"));
      }
      if (!((body.errcode == null) || (body.errcode === 0 && body.errmsg === 'ok'))) {
        return callback(new Error("" + body.errcode + ":" + body.errmsg));
      }
      callback(null, body);
    });
  };

  deleteMaterial = function(access_token, media_id, callback) {
    var options, url;
    assert(_.isFunction(callback), "missing callback");
    url = "" + RequestUrls.MATERIAL_DELETE_URL + "?access_token=" + access_token;
    options = {
      url: url,
      json: true,
      body: {
        media_id: media_id
      }
    };
    request.post(options, function(err, response, body) {
      console.dir(body);
      if (err != null) {
        return callback(err);
      }
      if (body == null) {
        return callback(new Error("invalid body"));
      }
      if (!((body.errcode == null) || (body.errcode === 0 && body.errmsg === 'ok'))) {
        return callback(new Error("" + body.errcode + ":" + body.errmsg));
      }
      callback(null, body);
    });
  };

  uploadMedia = function(access_token, type, filepath, callback) {
    var url;
    assert(_.isFunction(callback), "missing callback");
    url = "" + RequestUrls.MEDIA_UPLOAD_URL + "?access_token=" + access_token + "&type=" + type;
    child_process.exec("curl -F media=@" + filepath + " \"" + url + "\"", function(err, stdout, stderr) {
      var body;
      if (err != null) {
        return callback(err);
      }
      try {
        body = JSON.parse(stdout);
        console.dir(body);
        if (body == null) {
          return callback(new Error("invalid body"));
        }
        if (!((body.errcode == null) || (body.errcode === 0 && body.errmsg === 'ok'))) {
          return callback(new Error("" + body.errcode + ":" + body.errmsg));
        }
        callback(null, body);
        return;
      } catch (_error) {
        err = _error;
        console.dir(err);
        return callback(new Error("invalid body"));
      }
    });
  };

  getMediaById = function(access_token, media_id, callback) {
    var buf, headers, options, url;
    assert(_.isFunction(callback), "missing callback");
    url = "" + RequestUrls.MEDIA_GET_BY_ID_URL + "?access_token=" + access_token + "&media_id=" + media_id;
    options = {
      method: 'GET',
      url: url
    };
    buf = [];
    headers = null;
    request(options, function(err, response, body) {
      if (err != null) {
        return callback(err);
      }
      return headers = response.headers;
    }).on('response', function(res) {
      res.on('data', function(data) {
        return buf.push(data);
      });
      return res.on('end', function() {
        var body, error;
        console.dir(res.headers);
        if (res.headers['content-type'].indexOf('text/plain') >= 0 || res.headers['content-type'].indexOf('application/json') >= 0) {
          try {
            body = JSON.parse(Buffer.concat(buf).toString());
            return callback(new Error("" + body.errcode + ":" + body.errmsg));
          } catch (_error) {
            error = _error;
            return callback(new Error(error));
          }
          return;
        }
        return callback(null, Buffer.concat(buf));
      });
    });
  };

  module.exports = {
    loadMaterialList: loadMaterialList,
    loadMaterialCount: loadMaterialCount,
    getMaterialById: getMaterialById,
    addMaterial: addMaterial,
    addImageMaterial: addImageMaterial,
    addNewsMaterial: addNewsMaterial,
    updateNewsMaterial: updateNewsMaterial,
    deleteMaterial: deleteMaterial,
    uploadMedia: uploadMedia,
    getMediaById: getMediaById
  };

}).call(this);
