// Generated by CoffeeScript 1.8.0

/*
 * 微信素材的接口, 并做相关处理
 */

(function() {
  var RequestUrls, assert, child_process, debuglog, fs, getMaterialById, helps, loadMaterialCount, loadMaterialList, path, request, uploadMedia, _;

  debuglog = require("debug")("weixin_tools");

  _ = require('underscore');

  assert = require("assert");

  request = require('request');

  RequestUrls = require("../enums/request_urls");

  helps = require("../utils/helps");

  path = require("path");

  fs = require("fs");

  child_process = require('child_process');

  loadMaterialList = function(access_token, type, offset, count, callback) {
    var options, url;
    if (offset == null) {
      offset = 1;
    }
    if (count == null) {
      count = 20;
    }
    assert(_.isFunction(callback), "missing callback");
    url = "" + RequestUrls.MATERIAL_LOAD_LIST_URL + "?access_token=" + access_token;
    options = {
      url: url,
      json: true,
      method: "POST",
      body: {
        type: type,
        offset: offset,
        count: count
      }
    };
    request(options, (function(_this) {
      return function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        if (body == null) {
          return callback(new Error("invalid body"));
        }
        if (!((body.errcode == null) || (body.errcode === 0 && body.errmsg === 'ok'))) {
          return callback(new Error("" + body.errcode + ":" + body.errmsg));
        }
        callback(null, body);
      };
    })(this));
  };

  loadMaterialCount = function(access_token, callback) {
    var options, url;
    assert(_.isFunction(callback), "missing callback");
    url = "" + RequestUrls.MATERIAL_LOAD_COUNT_URL + "?access_token=" + access_token;
    options = {
      url: url,
      json: true,
      method: "GET"
    };
    request(options, (function(_this) {
      return function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        if (body == null) {
          return callback(new Error("invalid body"));
        }
        if (!((body.errcode == null) || (body.errcode === 0 && body.errmsg === 'ok'))) {
          return callback(new Error("" + body.errcode + ":" + body.errmsg));
        }
        callback(null, body);
      };
    })(this));
  };

  getMaterialById = function(access_token, id, callback) {
    var options, url;
    assert(_.isFunction(callback), "missing callback");
    url = "" + RequestUrls.MATERIAL_GET_BY_ID_URL + "?access_token=" + access_token;
    options = {
      url: url,
      json: true,
      method: "POST",
      body: {
        media_id: id
      }
    };
    request(options, (function(_this) {
      return function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        if (body == null) {
          return callback(new Error("invalid body"));
        }
        if (!((body.errcode == null) || (body.errcode === 0 && body.errmsg === 'ok'))) {
          return callback(new Error("" + body.errcode + ":" + body.errmsg));
        }
        callback(null, body);
      };
    })(this));
  };

  uploadMedia = function(access_token, type, filepath, callback) {
    var url;
    assert(_.isFunction(callback), "missing callback");
    url = "" + RequestUrls.MEDIA_UPLOAD_URL + "?access_token=" + access_token + "&type=" + type;
    url = "" + RequestUrls.MEDIA_UPLOAD_URL + "?access_token=" + access_token + "&type=" + type;
    return child_process.exec("curl -F media=@" + filepath + " " + url, function(err, stdout, stderr) {
      if (err != null) {
        return callback(err);
      }
      return callback(null, stdout);
    });
  };

  module.exports = {
    loadMaterialList: loadMaterialList,
    loadMaterialCount: loadMaterialCount,
    getMaterialById: getMaterialById,
    uploadMedia: uploadMedia
  };

}).call(this);
